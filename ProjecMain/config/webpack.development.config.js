// Імпортуємо функцію `merge` з пакету `webpack-merge`.
// Вона дозволяє поєднувати кілька конфігурацій Webpack в одну.
const { merge } = require('webpack-merge');

// Імпортуємо базову конфігурацію Webpack з файлу `webpack.config.js`.
// Цей файл містить спільні налаштування, які використовуються для різних середовищ (наприклад, продакшн та розробка).
const baseConfig = require('./webpack.config');

// Створюємо конфігурацію для середовища розробки.
const config = {
    // Вказуємо режим роботи Webpack як 'development' для оптимізації процесу розробки.
    mode: 'development',

    // Налаштовуємо вихідний файл для зібраного JavaScript-коду.
    output: {
        // Ім'я файлу, що буде створено після збірки. Тут він називається 'bundle.js'.
        filename: 'bundle.js',
    },

    // Описуємо правила для обробки різних типів файлів.
    module: {
        rules: [
            {
                // Застосовуємо це правило до файлів з розширенням `.css`.
                test: /\.css$/i,
                // Використовуємо лоадери для обробки CSS-файлів:
                use: [
                    // `style-loader` додає стилі до DOM через теги `<style>`.
                    'style-loader',
                    {
                        // Використовуємо `css-loader` для імпорту CSS у JavaScript-файли.
                        loader: 'css-loader',
                        options: {
                            // Налаштування для використання CSS-модулів.
                            modules: {
                                // Вказуємо, що імена класів будуть обмежені локально для уникнення конфліктів.
                                mode: 'local',
                                // Формат імен класів у CSS-модулях: `[name]` - ім'я файлу, `[local]` - оригінальне ім'я класу.
                                localIdentName: '[name]__[local]',
                                // `namedExport` керує тим, чи експортуються імена класів як окремі змінні.
                                // Якщо true, ти зможеш імпортувати окремі CSS-класи напряму.
                                // В даному випадку встановлено `false`, тому класи будуть доступні через об'єкт імпорту.
                                namedExport: false,
                            },
                        },
                    },
                ],
            },
        ],
    },

    // Налаштовуємо dev-сервер для розробки.
    devServer: {
        // Встановлюємо порт для сервера на 3000. Це означає, що сайт буде доступний за адресою `http://localhost:3000`.
        port: 3000,
    },
};

// Використовуємо функцію `merge` для поєднання базової конфігурації (`baseConfig`)
// зі специфічною конфігурацією для розробки (`config`), і експортуємо отриманий результат.
module.exports = merge(baseConfig, config);
